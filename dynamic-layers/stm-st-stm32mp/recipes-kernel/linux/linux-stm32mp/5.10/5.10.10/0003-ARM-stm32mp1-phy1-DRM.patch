From 0b98adc8e9a1ae1a8181ef1e94d71cbc7cbae6fc Mon Sep 17 00:00:00 2001
From: Christophe Parant <c.parant@phytec.fr>
Date: Tue, 5 Jan 2021 14:59:12 +0100
Subject: [PATCH 3/4] ARM stm32mp1 phy1 DRM

---
 drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c | 83 ++++++++-----------
 .../drm/panel/panel-raspberrypi-touchscreen.c | 46 +++++++++-
 2 files changed, 80 insertions(+), 49 deletions(-)

diff --git a/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c b/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c
index 34a9569e28f6..3ac41366362e 100644
--- a/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c
+++ b/drivers/gpu/drm/bridge/synopsys/dw-mipi-dsi.c
@@ -310,8 +310,16 @@ static int dw_mipi_dsi_host_attach(struct mipi_dsi_host *host,
 {
 	struct dw_mipi_dsi *dsi = host_to_dsi(host);
 	const struct dw_mipi_dsi_plat_data *pdata = dsi->plat_data;
+	struct drm_bridge *bridge;
+	struct drm_panel *panel;
+	int i, nb_endpoints;
 	int ret = -ENODEV;
 
+	/* Get number of endpoints */
+	nb_endpoints = of_graph_get_endpoint_count(host->dev->of_node);
+	if (!nb_endpoints)
+		return -ENODEV;
+
 	if (device->lanes > dsi->plat_data->max_data_lanes) {
 		dev_err(dsi->dev, "the number of data lanes(%u) is too many\n",
 			device->lanes);
@@ -323,6 +331,29 @@ static int dw_mipi_dsi_host_attach(struct mipi_dsi_host *host,
 	dsi->format = device->format;
 	dsi->mode_flags = device->mode_flags;
 
+	for (i = 1; i < nb_endpoints; i++) {
+		ret = drm_of_find_panel_or_bridge(host->dev->of_node, i, 0,
+						  &panel, &bridge);
+		if (!ret)
+			break;
+		else if (ret == -EPROBE_DEFER)
+			return ret;
+	}
+
+	/* check if an error is returned >> no panel or bridge detected */
+	if (ret)
+		return ret;
+
+	if (panel) {
+		bridge = drm_panel_bridge_add(panel, DRM_MODE_CONNECTOR_DSI);
+		if (IS_ERR(bridge))
+			return PTR_ERR(bridge);
+	}
+
+	dsi->panel_bridge = bridge;
+
+	drm_bridge_add(&dsi->bridge);
+
 	if (pdata->host_ops && pdata->host_ops->attach) {
 		ret = pdata->host_ops->attach(pdata->priv_data, device);
 		if (ret < 0)
@@ -345,6 +376,8 @@ static int dw_mipi_dsi_host_detach(struct mipi_dsi_host *host,
 			return ret;
 	}
 
+	drm_bridge_remove(&dsi->bridge);
+	drm_panel_bridge_remove(dsi->panel_bridge);
 	return 0;
 }
 
@@ -1051,9 +1084,6 @@ __dw_mipi_dsi_probe(struct platform_device *pdev,
 	struct reset_control *apb_rst;
 	struct dw_mipi_dsi *dsi;
 	struct resource *res;
-	struct drm_bridge *bridge;
-	struct drm_panel *panel;
-	int i, nb_endpoints;
 	int ret;
 
 	dsi = devm_kzalloc(dev, sizeof(*dsi), GFP_KERNEL);
@@ -1124,7 +1154,9 @@ __dw_mipi_dsi_probe(struct platform_device *pdev,
 	ret = mipi_dsi_host_register(&dsi->dsi_host);
 	if (ret) {
 		dev_err(dev, "Failed to register MIPI host: %d\n", ret);
-		goto err_pmr_enable;
+		pm_runtime_disable(dev);
+		dw_mipi_dsi_debugfs_remove(dsi);
+		return ERR_PTR(ret);
 	}
 
 	dsi->bridge.driver_private = dsi;
@@ -1133,54 +1165,11 @@ __dw_mipi_dsi_probe(struct platform_device *pdev,
 	dsi->bridge.of_node = pdev->dev.of_node;
 #endif
 
-	/* Get number of endpoints */
-	nb_endpoints = of_graph_get_endpoint_count(pdev->dev.of_node);
-	if (!nb_endpoints) {
-		ret = -ENODEV;
-		goto err_host_reg;
-	}
-
-	for (i = 1; i < nb_endpoints; i++) {
-		ret = drm_of_find_panel_or_bridge(pdev->dev.of_node, i, 0,
-						  &panel, &bridge);
-		if (!ret)
-			break;
-		else if (ret == -EPROBE_DEFER)
-			goto err_host_reg;
-	}
-
-	/* check if an error is returned >> no panel or bridge detected */
-	if (ret)
-		goto err_host_reg;
-
-	if (panel) {
-		bridge = drm_panel_bridge_add(panel, DRM_MODE_CONNECTOR_DSI);
-		if (IS_ERR(bridge)) {
-			ret = PTR_ERR(bridge);
-			goto err_host_reg;
-		}
-	}
-
-	dsi->panel_bridge = bridge;
-
-	drm_bridge_add(&dsi->bridge);
-
 	return dsi;
-
-err_host_reg:
-	mipi_dsi_host_unregister(&dsi->dsi_host);
-
-err_pmr_enable:
-	pm_runtime_disable(dev);
-	dw_mipi_dsi_debugfs_remove(dsi);
-
-	return ERR_PTR(ret);
 }
 
 static void __dw_mipi_dsi_remove(struct dw_mipi_dsi *dsi)
 {
-	drm_bridge_remove(&dsi->bridge);
-	drm_panel_bridge_remove(dsi->panel_bridge);
 	mipi_dsi_host_unregister(&dsi->dsi_host);
 
 	pm_runtime_disable(dsi->dev);
diff --git a/drivers/gpu/drm/panel/panel-raspberrypi-touchscreen.c b/drivers/gpu/drm/panel/panel-raspberrypi-touchscreen.c
index 2aa89eaecf6f..89d7914bca75 100644
--- a/drivers/gpu/drm/panel/panel-raspberrypi-touchscreen.c
+++ b/drivers/gpu/drm/panel/panel-raspberrypi-touchscreen.c
@@ -198,6 +198,45 @@ struct rpi_touchscreen {
 };
 
 static const struct drm_display_mode rpi_touchscreen_modes[] = {
+	{
+		/* Modeline for 25862069 clock */
+		.clock = 25862069 / 1000,
+		.hdisplay = 800,
+		.hsync_start = 800 + 1,
+		.hsync_end = 800 + 1 + 2,
+		.htotal = 800 + 1 + 2 + 45,
+		.vdisplay = 480,
+		.vsync_start = 480 + 7,
+		.vsync_end = 480 + 7 + 2,
+		.vtotal = 480 + 7 + 2 + 20,
+		.vrefresh = 50,
+	},
+	{
+		/* (800 + 200) * (480 + 20) * 50 = 25000000 */
+		.clock = 25000000 / 1000,
+		.hdisplay = 800,
+		.hsync_start = 800 + 154,
+		.hsync_end = 800 + 154 + 2,
+		.htotal = 800 + 154 + 2 + 42,
+		.vdisplay = 480,
+		.vsync_start = 480 + 1,
+		.vsync_end = 480 + 1 + 2,
+		.vtotal = 480 + 1 + 2 + 17,
+		.vrefresh = 50,
+	},
+ 	{
+		/* (800 + 100) * (480 + 70) * 50 = 24750000 */
+		.clock = 24750000 / 1000,
+		.hdisplay = 800,
+		.hsync_start = 800 + 54,
+		.hsync_end = 800 + 54 + 2,
+		.htotal = 800 + 54 + 2 + 44,
+		.vdisplay = 480,
+		.vsync_start = 480 + 49,
+		.vsync_end = 480 + 49 + 2,
+		.vtotal = 480 + 49 + 2 + 19,
+		.vrefresh = 50,
+	},	
 	{
 		/* Modeline comes from the Raspberry Pi firmware, with HFP=1
 		 * plugged in and clock re-computed from that.
@@ -271,12 +310,13 @@ static int rpi_touchscreen_noop(struct drm_panel *panel)
 static int rpi_touchscreen_enable(struct drm_panel *panel)
 {
 	struct rpi_touchscreen *ts = panel_to_ts(panel);
-	int i;
+	int i, val;
 
 	rpi_touchscreen_i2c_write(ts, REG_POWERON, 1);
 	/* Wait for nPWRDWN to go low to indicate poweron is done. */
 	for (i = 0; i < 100; i++) {
-		if (rpi_touchscreen_i2c_read(ts, REG_PORTB) & 1)
+		val = rpi_touchscreen_i2c_read(ts, REG_PORTB);
+		if (val >= 0 && (val & 1))
 			break;
 	}
 
@@ -380,6 +420,8 @@ static int rpi_touchscreen_probe(struct i2c_client *i2c,
 	ts->i2c = i2c;
 
 	ver = rpi_touchscreen_i2c_read(ts, REG_ID);
+	if (ver < 0)
+		ver = rpi_touchscreen_i2c_read(ts, REG_ID);
 	if (ver < 0) {
 		dev_err(dev, "Atmel I2C read failed: %d\n", ver);
 		return -ENODEV;
-- 
2.17.1

